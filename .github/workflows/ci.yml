# Continuous Integration workflow for Inline Context WordPress plugin
# Runs on every push to main and all pull requests
# Validates code quality using WordPress coding standards for both PHP and JavaScript

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        # Use npm install because the repo doesn't commit a package-lock.json yet.
        # If you add a lockfile later, switch back to `npm ci` for reproducible installs.
        run: npm install

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          tools: phpcs, composer
          ini-values: memory_limit=256M
          
      - name: Install WordPress Coding Standards
        run: |
          # Create a temporary composer.json for WPCS installation
          mkdir -p wpcs-temp && cd wpcs-temp
          echo '{"require-dev":{"wp-coding-standards/wpcs":"^3.0"}}' > composer.json
          composer install --no-dev
          phpcs --config-set installed_paths $(pwd)/vendor/wp-coding-standards/wpcs
          phpcs -i
          cd ..

      - name: Lint JS
        run: npm run lint:js --if-present

      - name: Lint PHP
        run: |
          # Verify WordPress standard is available
          phpcs --standard=WordPress --version
          # Run the actual linting
          npm run lint:php

      - name: Build
        run: npm run build

      - name: Generate POT (informational only)
        run: npm run pot --if-present
        continue-on-error: true
