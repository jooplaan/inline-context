# Continuous Integration workflow for Inline Context WordPress plugin
# Runs on every push to main and all pull requests
# Validates code quality using WordPress coding standards for both PHP and JavaScript

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        # Use npm install because the repo doesn't commit a package-lock.json yet.
        # If you add a lockfile later, switch back to `npm ci` for reproducible installs.
        run: npm install

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.0'
          tools: phpcs, composer
          ini-values: memory_limit=256M
          
      - name: Install WordPress Coding Standards
        run: |
          # Install WPCS using composer global
          composer global require wp-coding-standards/wpcs:^3.0
          
          # Set the installed_paths - composer global installs to ~/.composer/vendor or ~/.config/composer/vendor
          GLOBAL_VENDOR_PATH=""
          if [ -d ~/.composer/vendor ]; then
            GLOBAL_VENDOR_PATH=~/.composer/vendor/wp-coding-standards/wpcs
          elif [ -d ~/.config/composer/vendor ]; then
            GLOBAL_VENDOR_PATH=~/.config/composer/vendor/wp-coding-standards/wpcs
          else
            echo "Could not find composer global vendor directory"
            exit 1
          fi
          
          phpcs --config-set installed_paths "$GLOBAL_VENDOR_PATH"
          
          # Verify installation
          echo "WPCS installed at: $GLOBAL_VENDOR_PATH"
          echo "Available standards after installation:"
          phpcs -i

      - name: Lint JS
        run: npm run lint:js --if-present

      - name: Lint PHP
        run: |
          # Verify WordPress standard is available before running
          echo "Available coding standards:"
          phpcs -i
          
          # Check if WordPress standard is available
          if phpcs -i | grep -q "WordPress"; then
            echo "WordPress standard found, running linting..."
            npm run lint:php
          else
            echo "ERROR: WordPress standard not found"
            exit 1
          fi

      - name: Build
        run: npm run build

      - name: Generate POT (informational only)
        run: npm run pot --if-present
        continue-on-error: true
